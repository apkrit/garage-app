Required Items: 
    - Raspberry Pi Zero W with SD card, GPIO pins
    - IR Sensor with cables 
    - Soldering iron with solder, flux, solder wick/vacuum, etc.,

Setting-up the project:
    - Configure and enable WSGI and Apache.
    - Create PostgreSQL database named garagedb with sensorlog table (with status and time fields for sensorlog). May require creating a superuser for PostgreSQL. 
    - Create and activate venv virtual environment. 
    - Migrate Django framework. 
    - Install all requirements from requirements.txt. 
    - Create .env file and enter all variables required in .env for Twilio text messaging API. 
    - Create local_settings.py file containing variables required in settings.py.

Establish Static IP Address:
a) Edit dhcpcd.conf file
        1) Enter cmd "sudo vim /etc/bin/dhcpcd.conf"
        2) Get network interface type with cmd "ip r | grep default"
               - First IP is the network IP, field after 'dev' is the interface type.
        3) Confirm DNS gateway with cmd "cat /etc/resolv.conf"
               - Nameserver is the gateway, which may be the same as IP address.
        2) Fill following bracketed fields depending on information of network and desired static IP. Brackets encapsulate examples, and should not be included in file.
               interface {wlan0}
               static ip_address={192.168.1.10}
               static routers={192.168.1.1}
               static domain_name_servers={192.168.1.1}

SSH Connection:
a) Connect
        1) Enter cmd "ssh {IP Address}" to access Raspberry Pi Zero W
               - SSH has to be previously enabled for headless operation.
               - If static IP is not set for device, may eventually need to find new IP address.
        2) Confirm connection prompt by typing and entering yes
        3) Enter in password for Raspberry Pi Zero W account
b) Disconnect
        1) Enter cmd "exit"

Virtual Environment:
a) Activate Environment
        1)  Navigate to project directory containing hidden .venv directory.
               - Use "ls -a" to display hidden directory if needed
        2) Enter cmd "source env/bin/activate"
b) Deactivate Environment
        1) Simply enter cmd "deactivate"

Development Version of Garage Tracker:
a) Start ir.py sensor and log program
        1) Enter cmd "python ir.py"
b) Exit ir.py sensor and log program
        1) Press Ctrl+C

PostgreSQL Database:
a) Connect to PostgreSQL interface via CLI
        1) Enter "psql"
b) Connect to garagedb database
        1) Enter cmd "\c garagedb"
        2) Can also combine "psql garagedb" to both start psql CLI and connect to db.
b) Disconnect from db and psql CLI
        1) Enter cmd "\q"

Django Server:
a) Start Server:
        1) Navigate to directory containing manage.py file
        2) Enter cmd "python manage.py runserver"
b) Start Server w/ Access Provided to Local Network:
        1) Navigate to directory containing manage.py file
        2) Enter cmd "python manage.py runserver 0:8000"
               - 0 here is a shortcut for 0.0.0.0
c) Access server from other computer on network:
        1) Enter IP address and port of server into web browser ex: 192.168.1.100:8000\admin
               -May need to update settings.py in mysite directory to include the IP adress in ALLOWED_HOSTS,
               as there is no static IP address yet for the Raspberry Pi
d) Shutdown Server:
        1) Enter Ctrl+C

